---

# Pipeline Operators
  
demux:
  inputs:
    media-stream:
      type: video/*
  outputs:
    video-stream:
      type: video/*
    audio-stream:
      type: audio/*

parse:
  inputs:
    video-stream:
      type: video/*
  outputs:
    frame:
      type:
        media-type: video/*
        parsed: true
          
video-source:
  inputs:
    media:
      type: video/*
  outputs:
    frame:
      type:
        media-type: video/*
        parsed: true
  operators:
    demux:
      inputs:
        media-stream: inputs.media-stream
    parse:
      inputs:
        video-stream: demux.video-stream          
decode:
  inputs:
    frame:
      type:
        media-type: video/*
        parsed: true
  outputs:
    frame:
      type: video/x-raw

crop:
  inputs:
    frame:
      type: video/x-raw
    regions:
      type:
        media-type: metadata/objects
        format: bounding_boxes
  outputs:
    frame:
      type: video/x-raw

scale:
  inputs:
    frame:
      type: video/x-raw

  outputs:
    frame:
      type: video/x-raw

csc:
  inputs:
    frame:
      type: video/x-raw
  outputs:
    frame:
      type: video/x-raw

inference:
  inputs:
    frame:
      type:
        media-type: video/x-raw
        format: BGR
  outputs:
    tensors:
      type:
        media-type: tensors/x-raw
  properties:
    model:
      type: string
    model-type:
      type: string
  

tensors-to-objects:
  inputs:
    tensors:
      type:
        media-type: tensors/x-raw
  outputs:
    objects:
      type:
        media-type: metadata/objects
        format: jsonl

classify:
  properties:
    models:
      type: array
      items:
        oneOf:
        - type: array
          items:
            type: string
        - type: string
  inputs:
    frame:
      type: video/x-raw
      operator: crop.frame
    objects:
      type: metadata/objects
      format: bounding_boxes
      operator: crop.regions
  operators:
    crop:
      inputs:
        frame: inputs.frame
        regions: inputs.objects
    scale<models>:
      inputs:
        frame: crop.frame
    csc<models>:
      inputs:
        frame: scale.frame
    inference<models>:
      inputs:
        frame: csc.frame
      model-type: classify
    tensors-to-object-attributes<models>:
      inputs:
        tensor: inference.tensor
detect:  
  inputs:
    frame:
      type: video/x-raw
      operator: scale.frame
  outputs:
    objects:
      type:
        media-type: metadata/objects
        format: jsonl, bounding_boxes
      operator: tensors-to-objects.objects
    frame:
      type: video-x-raw
      operator: inputs.frame
  properties:
    model:
      type: string
      operator: inference.model
  operators:
    scale:
      inputs:
        frame: inputs.frame
    csc:
      inputs:
        frame: scale.frame
    inference:
      inputs:
        frame: csc.frame
      model-type: detect
    tensors-to-objects:
      inputs:
        tensor: inference.tensor

    
